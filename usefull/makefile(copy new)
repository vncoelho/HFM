# User makefile generated by OptFrame MCT (Make a Compilable Thing!)

all: mctAppHFM
	@echo "BUILT SUCCESSFULLY!"


#Maybe use CPLEX solver for optimal linear regression
#Deprecated from now
#Time for BBV
CPLEXDIR      = /opt/ibm/ILOG/CPLEX_Studio1251/cplex
CONCERTDIR    = /opt/ibm/ILOG/CPLEX_Studio1251/concert
CCLNFLAGS = -L$(CPLEXDIR)/lib/x86-64_sles10_4.1/static_pic -DIL_STD -lilocplex -lcplex -L$(CONCERTDIR)/lib/x86-64_sles10_4.1/static_pic -lconcert -m64 -lm -pthread
CCINCFLAG = -I$(CPLEXDIR)/include -I$(CONCERTDIR)/include 


RESTSDK_FGLAS = #-lboost_system -lcrypto -lssl -lcpprest

#OpenMP Multi-Core Multi-Thread flags
OPENMP_FLAGS = -fopenmp -lpthread

#Raspberry WiringPi Flags (Package GPIO, Copyright (c) 2012-2017 Gordon Henderson, is required)
LDFLAGS	= -L/usr/local/lib
LDLIBS  = -lwiringPi -lwiringPiDev -lpthread -lm -lcrypt -lrt

LLIBSMP3 = -lsndfile 
GCC_FLAGS = -g -Ofast -Wall --std=c++11  


mctAppHFM:      mainHFM.o    HFMScanner.o  
	g++ $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainHFM.o  HFMScanner.o -o ./MyProjects/app_HFM

mainHFM.o: ./MyProjects/mainHFM.cpp  ./MyProjects/mainHFM/Representation.h 
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainTeste.cpp -o mainHFM.o
		
mainHFM.o: ./MyProjects/mainHFM.cpp  ./MyProjects/mainHFM/Representation.h 
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainTeste.cpp -o mainHFM.o
	
mainHFM.o: ./MyProjects/mainHFM.cpp  ./MyProjects/mainHFM/Representation.h 
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainTeste.cpp -o mainHFM.o
	
mainHFM.o: ./MyProjects/mainHFM.cpp  ./MyProjects/mainHFM/Representation.h 
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainTeste.cpp -o mainHFM.o
	
mainHFM.o: ./MyProjects/mainHFM.cpp  ./MyProjects/mainHFM/Representation.h 
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) mainTeste.cpp -o mainHFM.o
	
						
$projectProblemInstance.o: $project/ProblemInstance.cpp $project/ProblemInstance.h
	g++ -c $(GCC_FLAGS) $project/ProblemInstance.cpp -o $projectProblemInstance.o
	
$projectEvaluator.o: $project/Evaluator.cpp $project/Evaluator.h
	g++ -c $(GCC_FLAGS) $project/Evaluator.cpp -o $projectEvaluator.o
	
$projectConstructive$constructive.o: $project/Constructive$constructive.cpp $project/Constructive$constructive.h
	g++ -c $(GCC_FLAGS) $project/Constructive$constructive.cpp -o $projectConstructive$constructive.o

$projectNSSeq$neighborhood.o: $project/NSSeq$neighborhood.cpp $project/NSSeq$neighborhood.h
	g++ -c $(GCC_FLAGS) $project/NSSeq$neighborhood.cpp -o $projectNSSeq$neighborhood.o
		
HFMScanner.o: ./OptFrame/Scanner++/Scanner.cpp
	g++ -c $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) ./OptFrame/Scanner++/Scanner.cpp -o HFMScanner.o

HFM:
	g++ $(GCC_FLAGS) $(RESTSDK_FGLAS) $(OPENMP_FLAGS) $(SCANNERFLAGS) ./MyProjects/mainHFM.cpp -o ./MyProjects/app_HFM
	
clean:
	make clean -C ./MyProjects/
	

